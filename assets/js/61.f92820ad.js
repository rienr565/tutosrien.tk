(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{453:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"additional-information"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-information"}},[t._v("#")]),t._v(" Additional information")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("This page is a follow-up and bases its code off of "),s("RouterLink",{attrs:{to:"/sharding/"}},[t._v("the previous page")]),t._v(".")],1)]),t._v(" "),s("p",[t._v("Here are some extra topics covered about sharding that you might have concerns about.")]),t._v(" "),s("h2",{attrs:{id:"legend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#legend"}},[t._v("#")]),t._v(" Legend")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("manager")]),t._v(" is an instance of "),s("code",[t._v("ShardingManager")]),t._v(", e.g. "),s("code",[t._v("const manager = new ShardingManager(file, options);")])]),t._v(" "),s("li",[s("code",[t._v("client.shard")]),t._v(" refers to the current shard.")])]),t._v(" "),s("h2",{attrs:{id:"shard-messages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shard-messages"}},[t._v("#")]),t._v(" Shard messages")]),t._v(" "),s("p",[t._v("In order for shards to communicate, they must send messages to one another, as they are each their own process. You can listen for these messages by adding the following listener in your "),s("code",[t._v("index.js")]),t._v(" file:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("manager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Shard[")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("] : ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_eval"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" : ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_result"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("As the property names imply, the "),s("code",[t._v("_eval")]),t._v(" property is what the shard is attempting to evaluate, and the "),s("code",[t._v("_result")]),t._v(" property is the output of said evaluation. However, these properties are only guaranteed if a "),s("em",[t._v("shard")]),t._v(" is sending a message. There will also be an "),s("code",[t._v("_error")]),t._v(" property, should the evaluation have thrown an error.")]),t._v(" "),s("p",[t._v("You can also send messages via "),s("code",[t._v("process.send('hello')")]),t._v(", which would not contain the same information. This is why the "),s("code",[t._v(".message")]),t._v(" property's type is declared as "),s("code",[t._v("*")]),t._v(" "),s("branch",{attrs:{version:"11.x",inline:""}},[s("a",{attrs:{href:"https://discord.js.org/#/docs/main/v11/class/Shard?scrollTo=e-message",target:"_blank",rel:"noopener noreferrer"}},[t._v("in the discord.js documentation"),s("OutboundLink")],1)]),s("branch",{attrs:{version:"12.x",inline:""}},[s("a",{attrs:{href:"https://discord.js.org/#/docs/main/stable/class/Shard?scrollTo=e-message",target:"_blank",rel:"noopener noreferrer"}},[t._v("in the discord.js documentation"),s("OutboundLink")],1)]),t._v(".")],1),t._v(" "),s("h2",{attrs:{id:"specific-shards"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#specific-shards"}},[t._v("#")]),t._v(" Specific shards")]),t._v(" "),s("p",[t._v("There might be times where you want to target a specific shard. An example would be to kill a specific shard that isn't working as intended. You can achieve this by taking the following snippet (in a command, preferably):")]),t._v(" "),s("branch",{attrs:{version:"11.x"}},[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'if (this.shard.id === 0) process.exit();'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("branch",{attrs:{version:"12.x"}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("In version 12 "),s("a",{attrs:{href:"https://discord.js.org/#/docs/main/stable/class/ShardClientUtil?scrollTo=ids",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("client.shard")]),s("OutboundLink")],1),t._v(" can hold multiple ids. If you use the default sharding manager the "),s("code",[t._v(".ids")]),t._v(" array will only have one entry.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'if (this.shard.ids.includes(0)) process.exit();'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("If you're using something like "),s("a",{attrs:{href:"http://pm2.keymetrics.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PM2"),s("OutboundLink")],1),t._v(" or "),s("a",{attrs:{href:"https://github.com/foreverjs/forever",target:"_blank",rel:"noopener noreferrer"}},[t._v("Forever"),s("OutboundLink")],1),t._v(", this is an easy way to restart a specific shard. Remember, "),s("branch",{attrs:{version:"11.x",inline:""}},[s("a",{attrs:{href:"https://discord.js.org/#/docs/main/v11/class/ShardClientUtil?scrollTo=broadcastEval",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shard#BroadcastEval"),s("OutboundLink")],1)]),s("branch",{attrs:{version:"12.x",inline:""}},[s("a",{attrs:{href:"https://discord.js.org/#/docs/main/stable/class/ShardClientUtil?scrollTo=broadcastEval",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shard#BroadcastEval"),s("OutboundLink")],1)]),t._v(" sends a message to "),s("strong",[t._v("all")]),t._v(" shards, so you have to check if it's on the shard you want.")],1),t._v(" "),s("h2",{attrs:{id:"shardingmanager-shardargs-and-shardingmanager-execargv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shardingmanager-shardargs-and-shardingmanager-execargv"}},[t._v("#")]),t._v(" "),s("code",[t._v("ShardingManager#shardArgs")]),t._v(" and "),s("code",[t._v("ShardingManager#execArgv")])]),t._v(" "),s("p",[t._v("Consider the following example of creating a new "),s("code",[t._v("ShardingManager")]),t._v(" instance:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" manager "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ShardingManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./bot.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\texecArgv"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--trace-warnings'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tshardArgs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--ansi'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--color'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\ttoken"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'your-token-goes-here'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("execArgv")]),t._v(" property is what you would normally pass to node without sharding, e.g.:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("node --trace-warnings bot.js\n")])])]),s("p",[t._v("You can find a list of command line options for node "),s("a",{attrs:{href:"https://nodejs.org/api/cli.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("shardArgs")]),t._v(" property is what you would normally pass to your bot without sharding, e.g.:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("node bot.js --ansi --color\n")])])]),s("p",[t._v("You can access them later as usual via "),s("code",[t._v("process.argv")]),t._v(", which contains an array of executable, your main file, and the command-line arguments used to execute the script.")]),t._v(" "),s("h2",{attrs:{id:"eval-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-arguments"}},[t._v("#")]),t._v(" Eval arguments")]),t._v(" "),s("p",[t._v("There may come a point where you will want to pass functions or arguments from the outer scope into a "),s("code",[t._v(".broadcastEval()")]),t._v(" call.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("funcName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(")('")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("')")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In this small snippet, an entire function is being passed to the eval. It needs to be encased in parenthesis; it will throw errors on its way there otherwise. Another set of parenthesis is needed so the function actually gets called. Finally, the passing of the argument itself, which slightly varies, depending on the type of argument you are passing. If it's a string, you must wrap it in quotes, or it will be interpreted as is and will throw a syntax error, because it won't be a string by the time it gets there.")]),t._v(" "),s("p",[t._v("Now, what if you wanted to call a function from "),s("em",[t._v("within")]),t._v(" the client context? That is to say, you are not passing a function. It would look something like this:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("this.")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("funcName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(");")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This would become "),s("code",[t._v("client.funcName(args)")]),t._v(" once it gets through. This is handy if you, for example, have extended your client object with your own class and wish to call some of its methods manually.")]),t._v(" "),s("h3",{attrs:{id:"asynchronous-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-functions"}},[t._v("#")]),t._v(" Asynchronous functions")]),t._v(" "),s("p",[t._v("There may be a time when you want to have your shard process an asynchronous function. Here's how you can do that!")]),t._v(" "),s("branch",{attrs:{version:"11.x"}},[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n\tlet channel = this.channels.get('id');\n\tlet msg;\n\tif (channel) {\n\t\tmsg = channel.fetchMessage('id').then(m => m.id);\n\t}\n\tmsg;\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("branch",{attrs:{version:"12.x"}},[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n\tlet channel = this.channels.cache.get('id');\n\tlet msg;\n\tif (channel) {\n\t\tmsg = channel.messages.fetch('id').then(m => m.id);\n\t}\n\tmsg;\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("This snippet allows you to return fetched messages outside of the "),s("code",[t._v("broadcastEval")]),t._v(", allowing you to know whether or not you were able to retrieve a message, for example. Remember, you aren't able to return entire objects outside. Now, what if we wanted to use "),s("code",[t._v("async/await")]),t._v(" syntax inside?")]),t._v(" "),s("branch",{attrs:{version:"11.x"}},[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n\t(async () => {\n\t\tlet channel = this.channels.get('id');\n\t\tlet msg;\n\t\tif (channel) {\n\t\t\tmsg = await channel.fetchMessage('id').then(m => m.id);\n\t\t}\n\t\treturn msg;\n\t})();\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("branch",{attrs:{version:"12.x"}},[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastEval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n\t(async () => {\n\t\tlet channel = this.channels.cache.get('id');\n\t\tlet msg;\n\t\tif (channel) {\n\t\t\tmsg = await channel.messages.fetch('id').then(m => m.id);\n\t\t}\n\t\treturn msg;\n\t})();\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("This example will work the same, but you are able to produce cleaner code with "),s("code",[t._v("async/await")]),t._v(". Additionally. What this does is declare an asynchronous function and then immediately call it. As it is also the last declared line, it is effectively being returned. Remember that you need to "),s("code",[t._v("return")]),t._v(" an item inside a function one way or another.")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);